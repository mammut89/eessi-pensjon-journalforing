buildscript {
    ext {
        kotlinVersion = '1.3.20'
        springBootVersion = '2.1.2.RELEASE'
        prometheusVersion = '0.5.0'
        jacksonModuleKotlinVersion = '2.9.8'
        junitVersion = '5.4.1'
        camelVersion = '2.23.1'
        logbackVersion = '1.2.3'
        slf4jVersion = '1.7.25'
        personV3Version = '3.4.1'
        organisasjonEnhetV2Version = '2.1.0'
        arbeidsfordelingV1Version = '1.1.0'
        logstashLogbackVersion = '5.3'
        cxfVersion = '3.2.7'
    }
    repositories {
        maven {
            url "https://repo.adeo.no/repository/maven-central"
        }
        maven {
            name "JCenter Gradle Plugins"
            url  "https://dl.bintray.com/gradle/gradle-plugins"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }
}

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.9'
    id 'com.github.ben-manes.versions' version '0.21.0'
    id "org.sonarqube" version "2.7"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = "no.nav.eessi"
version = "0.0.1"

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
jar {
    baseName = 'pensjon-mottak'
}

dependencies {
    // Spring boot
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation("org.springframework.boot:spring-boot-starter-undertow")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude module: 'junit'
        exclude module: "mockito-core"
    }

    // Allows for variable expiration-date of each cache-entry
    implementation("net.jodah:expiringmap:0.5.9")

    // Camel
    implementation("org.apache.camel:camel-spring-boot-starter:${camelVersion}")
    implementation("org.apache.camel:camel-servlet-starter:${camelVersion}") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
    implementation("org.apache.camel:camel-jms:${camelVersion}")
    implementation("org.apache.camel:camel-kafka:${camelVersion}")
    implementation("org.apache.camel:camel-jsonpath:${camelVersion}")

    // Micrometer
    implementation("io.micrometer:micrometer-registry-prometheus")

    // Kotlin
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleKotlinVersion}")

    // jUnit
    testImplementation("org.junit.jupiter:junit-jupiter:${junitVersion}")

    // mock
    testImplementation("io.findify:s3mock_2.12:0.2.5")

    // Logging
    implementation("net.logstash.logback:logstash-logback-encoder:${logstashLogbackVersion}")

    implementation("io.confluent:kafka-avro-serializer:5.1.0") {
        exclude group: "org.apache.zookeeper",  module: "zookeeper"
    }

    implementation("no.nav.tjenester:nav-person-v3-tjenestespesifikasjon:${personV3Version}")
    implementation("no.nav.tjenester:nav-organisasjonEnhet-v2-tjenestespesifikasjon:${organisasjonEnhetV2Version}:jaxws")
    implementation("no.nav.tjenester:nav-arbeidsfordeling-v1-tjenestespesifikasjon:${arbeidsfordelingV1Version}:jaxws")
    implementation("no.nav.tjenester.fim:nav-fim-behandleJournal-v3-tjenestespesifikasjon:3.0.2:jaxws")

    // Apache CXF
    implementation("org.apache.cxf:cxf-spring-boot-starter-jaxws:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-ws-security:${cxfVersion}")
    implementation("org.apache.cxf:cxf-rt-features-logging:${cxfVersion}")
    implementation('org.jvnet.jaxb2_commons:jaxb2-basics-runtime:1.11.1')

    // Amazon S3
    implementation("com.amazonaws:aws-java-sdk-s3:1.11.488")

    // PDF-stuff
    implementation("org.apache.pdfbox:pdfbox:2.0.14")
    implementation('com.openhtmltopdf:openhtmltopdf-core:0.0.1-RC17')
    implementation('com.openhtmltopdf:openhtmltopdf-pdfbox:0.0.1-RC17')
    implementation('com.openhtmltopdf:openhtmltopdf-jsoup-dom-converter:0.0.1-RC17')

    // HTML-parser/manipulator
    implementation('org.jsoup:jsoup:1.11.3')

    // integration-test mocking of "collaborators"
    // https://github.com/navikt/kafka-embedded-env
    testImplementation "no.nav:kafka-embedded-env:2.1.1"
    testImplementation "io.mockk:mockk:1.9.2"
    testImplementation('org.awaitility:awaitility-kotlin:3.1.6') {
        exclude module: 'junit'
    }

    compile("org.springframework.kafka:spring-kafka")

}

test {
    useJUnitPlatform() {
        excludeTags 'integrationtest'
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integrationtest'
    }
    check.dependsOn it
    shouldRunAfter test
}

project.tasks["sonarqube"].dependsOn "check"

repositories {
    mavenCentral()
    maven {
        name 'Confluent maven repo'
        url 'http://packages.confluent.io/maven/'
    }
    maven {
        url "https://repo.adeo.no/repository/maven-central"
    }
    maven {
        url "https://repo.adeo.no/repository/maven-releases/"
    }
    maven {
        name "JCenter Gradle Plugins"
        url  "https://dl.bintray.com/gradle/gradle-plugins"
    }
}

/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    resolutionStrategy() {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Not a real release')
                }
            }
        }
    }
    revision = 'release'
}
